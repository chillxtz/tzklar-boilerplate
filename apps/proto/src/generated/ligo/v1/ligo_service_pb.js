// source: ligo/v1/ligo_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.ligo.v1.CompileContractRequest', null, global);
goog.exportSymbol('proto.ligo.v1.CompileContractResponse', null, global);
goog.exportSymbol('proto.ligo.v1.CompileExpressionRequest', null, global);
goog.exportSymbol('proto.ligo.v1.CompileExpressionResponse', null, global);
goog.exportSymbol('proto.ligo.v1.DisplayFormat', null, global);
goog.exportSymbol('proto.ligo.v1.MichelsonFormat', null, global);
goog.exportSymbol('proto.ligo.v1.Protocol', null, global);
goog.exportSymbol('proto.ligo.v1.Syntax', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ligo.v1.CompileContractRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ligo.v1.CompileContractRequest.repeatedFields_, null);
};
goog.inherits(proto.ligo.v1.CompileContractRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ligo.v1.CompileContractRequest.displayName = 'proto.ligo.v1.CompileContractRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ligo.v1.CompileContractResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ligo.v1.CompileContractResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ligo.v1.CompileContractResponse.displayName = 'proto.ligo.v1.CompileContractResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ligo.v1.CompileExpressionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ligo.v1.CompileExpressionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ligo.v1.CompileExpressionRequest.displayName = 'proto.ligo.v1.CompileExpressionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ligo.v1.CompileExpressionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ligo.v1.CompileExpressionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ligo.v1.CompileExpressionResponse.displayName = 'proto.ligo.v1.CompileExpressionResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ligo.v1.CompileContractRequest.repeatedFields_ = [2,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ligo.v1.CompileContractRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ligo.v1.CompileContractRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ligo.v1.CompileContractRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ligo.v1.CompileContractRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractContent: jspb.Message.getFieldWithDefault(msg, 1, ""),
    constantsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    disableMichelsonTypechecking: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    displayFormat: jspb.Message.getFieldWithDefault(msg, 4, 0),
    michelsonFormat: jspb.Message.getFieldWithDefault(msg, 5, 0),
    syntax: jspb.Message.getFieldWithDefault(msg, 6, 0),
    viewsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    entryPoint: jspb.Message.getFieldWithDefault(msg, 8, ""),
    protocol: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ligo.v1.CompileContractRequest}
 */
proto.ligo.v1.CompileContractRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ligo.v1.CompileContractRequest;
  return proto.ligo.v1.CompileContractRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ligo.v1.CompileContractRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ligo.v1.CompileContractRequest}
 */
proto.ligo.v1.CompileContractRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractContent(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addConstants(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableMichelsonTypechecking(value);
      break;
    case 4:
      var value = /** @type {!proto.ligo.v1.DisplayFormat} */ (reader.readEnum());
      msg.setDisplayFormat(value);
      break;
    case 5:
      var value = /** @type {!proto.ligo.v1.MichelsonFormat} */ (reader.readEnum());
      msg.setMichelsonFormat(value);
      break;
    case 6:
      var value = /** @type {!proto.ligo.v1.Syntax} */ (reader.readEnum());
      msg.setSyntax(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addViews(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntryPoint(value);
      break;
    case 9:
      var value = /** @type {!proto.ligo.v1.Protocol} */ (reader.readEnum());
      msg.setProtocol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ligo.v1.CompileContractRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ligo.v1.CompileContractRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ligo.v1.CompileContractRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ligo.v1.CompileContractRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractContent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConstantsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {!proto.ligo.v1.DisplayFormat} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {!proto.ligo.v1.MichelsonFormat} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getSyntax();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getViewsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getEntryPoint();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {!proto.ligo.v1.Protocol} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeEnum(
      9,
      f
    );
  }
};


/**
 * optional string contract_content = 1;
 * @return {string}
 */
proto.ligo.v1.CompileContractRequest.prototype.getContractContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ligo.v1.CompileContractRequest} returns this
 */
proto.ligo.v1.CompileContractRequest.prototype.setContractContent = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string constants = 2;
 * @return {!Array<string>}
 */
proto.ligo.v1.CompileContractRequest.prototype.getConstantsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ligo.v1.CompileContractRequest} returns this
 */
proto.ligo.v1.CompileContractRequest.prototype.setConstantsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ligo.v1.CompileContractRequest} returns this
 */
proto.ligo.v1.CompileContractRequest.prototype.addConstants = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ligo.v1.CompileContractRequest} returns this
 */
proto.ligo.v1.CompileContractRequest.prototype.clearConstantsList = function() {
  return this.setConstantsList([]);
};


/**
 * optional bool disable_michelson_typechecking = 3;
 * @return {boolean}
 */
proto.ligo.v1.CompileContractRequest.prototype.getDisableMichelsonTypechecking = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ligo.v1.CompileContractRequest} returns this
 */
proto.ligo.v1.CompileContractRequest.prototype.setDisableMichelsonTypechecking = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ligo.v1.CompileContractRequest} returns this
 */
proto.ligo.v1.CompileContractRequest.prototype.clearDisableMichelsonTypechecking = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ligo.v1.CompileContractRequest.prototype.hasDisableMichelsonTypechecking = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DisplayFormat display_format = 4;
 * @return {!proto.ligo.v1.DisplayFormat}
 */
proto.ligo.v1.CompileContractRequest.prototype.getDisplayFormat = function() {
  return /** @type {!proto.ligo.v1.DisplayFormat} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.ligo.v1.DisplayFormat} value
 * @return {!proto.ligo.v1.CompileContractRequest} returns this
 */
proto.ligo.v1.CompileContractRequest.prototype.setDisplayFormat = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ligo.v1.CompileContractRequest} returns this
 */
proto.ligo.v1.CompileContractRequest.prototype.clearDisplayFormat = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ligo.v1.CompileContractRequest.prototype.hasDisplayFormat = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional MichelsonFormat michelson_format = 5;
 * @return {!proto.ligo.v1.MichelsonFormat}
 */
proto.ligo.v1.CompileContractRequest.prototype.getMichelsonFormat = function() {
  return /** @type {!proto.ligo.v1.MichelsonFormat} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.ligo.v1.MichelsonFormat} value
 * @return {!proto.ligo.v1.CompileContractRequest} returns this
 */
proto.ligo.v1.CompileContractRequest.prototype.setMichelsonFormat = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ligo.v1.CompileContractRequest} returns this
 */
proto.ligo.v1.CompileContractRequest.prototype.clearMichelsonFormat = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ligo.v1.CompileContractRequest.prototype.hasMichelsonFormat = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Syntax syntax = 6;
 * @return {!proto.ligo.v1.Syntax}
 */
proto.ligo.v1.CompileContractRequest.prototype.getSyntax = function() {
  return /** @type {!proto.ligo.v1.Syntax} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.ligo.v1.Syntax} value
 * @return {!proto.ligo.v1.CompileContractRequest} returns this
 */
proto.ligo.v1.CompileContractRequest.prototype.setSyntax = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * repeated string views = 7;
 * @return {!Array<string>}
 */
proto.ligo.v1.CompileContractRequest.prototype.getViewsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ligo.v1.CompileContractRequest} returns this
 */
proto.ligo.v1.CompileContractRequest.prototype.setViewsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ligo.v1.CompileContractRequest} returns this
 */
proto.ligo.v1.CompileContractRequest.prototype.addViews = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ligo.v1.CompileContractRequest} returns this
 */
proto.ligo.v1.CompileContractRequest.prototype.clearViewsList = function() {
  return this.setViewsList([]);
};


/**
 * optional string entry_point = 8;
 * @return {string}
 */
proto.ligo.v1.CompileContractRequest.prototype.getEntryPoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ligo.v1.CompileContractRequest} returns this
 */
proto.ligo.v1.CompileContractRequest.prototype.setEntryPoint = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional Protocol protocol = 9;
 * @return {!proto.ligo.v1.Protocol}
 */
proto.ligo.v1.CompileContractRequest.prototype.getProtocol = function() {
  return /** @type {!proto.ligo.v1.Protocol} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.ligo.v1.Protocol} value
 * @return {!proto.ligo.v1.CompileContractRequest} returns this
 */
proto.ligo.v1.CompileContractRequest.prototype.setProtocol = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ligo.v1.CompileContractRequest} returns this
 */
proto.ligo.v1.CompileContractRequest.prototype.clearProtocol = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ligo.v1.CompileContractRequest.prototype.hasProtocol = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ligo.v1.CompileContractResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ligo.v1.CompileContractResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ligo.v1.CompileContractResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ligo.v1.CompileContractResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    compiledContractContent: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ligo.v1.CompileContractResponse}
 */
proto.ligo.v1.CompileContractResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ligo.v1.CompileContractResponse;
  return proto.ligo.v1.CompileContractResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ligo.v1.CompileContractResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ligo.v1.CompileContractResponse}
 */
proto.ligo.v1.CompileContractResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompiledContractContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ligo.v1.CompileContractResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ligo.v1.CompileContractResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ligo.v1.CompileContractResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ligo.v1.CompileContractResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompiledContractContent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string compiled_contract_content = 1;
 * @return {string}
 */
proto.ligo.v1.CompileContractResponse.prototype.getCompiledContractContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ligo.v1.CompileContractResponse} returns this
 */
proto.ligo.v1.CompileContractResponse.prototype.setCompiledContractContent = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ligo.v1.CompileExpressionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ligo.v1.CompileExpressionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ligo.v1.CompileExpressionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ligo.v1.CompileExpressionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractContent: jspb.Message.getFieldWithDefault(msg, 1, ""),
    syntax: jspb.Message.getFieldWithDefault(msg, 2, 0),
    expressionName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    displayFormat: jspb.Message.getFieldWithDefault(msg, 4, 0),
    michelsonFormat: jspb.Message.getFieldWithDefault(msg, 5, 0),
    protocol: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ligo.v1.CompileExpressionRequest}
 */
proto.ligo.v1.CompileExpressionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ligo.v1.CompileExpressionRequest;
  return proto.ligo.v1.CompileExpressionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ligo.v1.CompileExpressionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ligo.v1.CompileExpressionRequest}
 */
proto.ligo.v1.CompileExpressionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractContent(value);
      break;
    case 2:
      var value = /** @type {!proto.ligo.v1.Syntax} */ (reader.readEnum());
      msg.setSyntax(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpressionName(value);
      break;
    case 4:
      var value = /** @type {!proto.ligo.v1.DisplayFormat} */ (reader.readEnum());
      msg.setDisplayFormat(value);
      break;
    case 5:
      var value = /** @type {!proto.ligo.v1.MichelsonFormat} */ (reader.readEnum());
      msg.setMichelsonFormat(value);
      break;
    case 6:
      var value = /** @type {!proto.ligo.v1.Protocol} */ (reader.readEnum());
      msg.setProtocol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ligo.v1.CompileExpressionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ligo.v1.CompileExpressionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ligo.v1.CompileExpressionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ligo.v1.CompileExpressionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractContent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSyntax();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getExpressionName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {!proto.ligo.v1.DisplayFormat} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {!proto.ligo.v1.MichelsonFormat} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = /** @type {!proto.ligo.v1.Protocol} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional string contract_content = 1;
 * @return {string}
 */
proto.ligo.v1.CompileExpressionRequest.prototype.getContractContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ligo.v1.CompileExpressionRequest} returns this
 */
proto.ligo.v1.CompileExpressionRequest.prototype.setContractContent = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Syntax syntax = 2;
 * @return {!proto.ligo.v1.Syntax}
 */
proto.ligo.v1.CompileExpressionRequest.prototype.getSyntax = function() {
  return /** @type {!proto.ligo.v1.Syntax} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ligo.v1.Syntax} value
 * @return {!proto.ligo.v1.CompileExpressionRequest} returns this
 */
proto.ligo.v1.CompileExpressionRequest.prototype.setSyntax = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string expression_name = 3;
 * @return {string}
 */
proto.ligo.v1.CompileExpressionRequest.prototype.getExpressionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ligo.v1.CompileExpressionRequest} returns this
 */
proto.ligo.v1.CompileExpressionRequest.prototype.setExpressionName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional DisplayFormat display_format = 4;
 * @return {!proto.ligo.v1.DisplayFormat}
 */
proto.ligo.v1.CompileExpressionRequest.prototype.getDisplayFormat = function() {
  return /** @type {!proto.ligo.v1.DisplayFormat} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.ligo.v1.DisplayFormat} value
 * @return {!proto.ligo.v1.CompileExpressionRequest} returns this
 */
proto.ligo.v1.CompileExpressionRequest.prototype.setDisplayFormat = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ligo.v1.CompileExpressionRequest} returns this
 */
proto.ligo.v1.CompileExpressionRequest.prototype.clearDisplayFormat = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ligo.v1.CompileExpressionRequest.prototype.hasDisplayFormat = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional MichelsonFormat michelson_format = 5;
 * @return {!proto.ligo.v1.MichelsonFormat}
 */
proto.ligo.v1.CompileExpressionRequest.prototype.getMichelsonFormat = function() {
  return /** @type {!proto.ligo.v1.MichelsonFormat} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.ligo.v1.MichelsonFormat} value
 * @return {!proto.ligo.v1.CompileExpressionRequest} returns this
 */
proto.ligo.v1.CompileExpressionRequest.prototype.setMichelsonFormat = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ligo.v1.CompileExpressionRequest} returns this
 */
proto.ligo.v1.CompileExpressionRequest.prototype.clearMichelsonFormat = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ligo.v1.CompileExpressionRequest.prototype.hasMichelsonFormat = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Protocol protocol = 6;
 * @return {!proto.ligo.v1.Protocol}
 */
proto.ligo.v1.CompileExpressionRequest.prototype.getProtocol = function() {
  return /** @type {!proto.ligo.v1.Protocol} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.ligo.v1.Protocol} value
 * @return {!proto.ligo.v1.CompileExpressionRequest} returns this
 */
proto.ligo.v1.CompileExpressionRequest.prototype.setProtocol = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ligo.v1.CompileExpressionRequest} returns this
 */
proto.ligo.v1.CompileExpressionRequest.prototype.clearProtocol = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ligo.v1.CompileExpressionRequest.prototype.hasProtocol = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ligo.v1.CompileExpressionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ligo.v1.CompileExpressionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ligo.v1.CompileExpressionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ligo.v1.CompileExpressionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    compiledExpressionContent: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ligo.v1.CompileExpressionResponse}
 */
proto.ligo.v1.CompileExpressionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ligo.v1.CompileExpressionResponse;
  return proto.ligo.v1.CompileExpressionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ligo.v1.CompileExpressionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ligo.v1.CompileExpressionResponse}
 */
proto.ligo.v1.CompileExpressionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompiledExpressionContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ligo.v1.CompileExpressionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ligo.v1.CompileExpressionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ligo.v1.CompileExpressionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ligo.v1.CompileExpressionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompiledExpressionContent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string compiled_expression_content = 1;
 * @return {string}
 */
proto.ligo.v1.CompileExpressionResponse.prototype.getCompiledExpressionContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ligo.v1.CompileExpressionResponse} returns this
 */
proto.ligo.v1.CompileExpressionResponse.prototype.setCompiledExpressionContent = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.ligo.v1.DisplayFormat = {
  DISPLAY_FORMAT_DEV: 0,
  DISPLAY_FORMAT_JSON: 1,
  DISPLAY_FORMAT_HUMAN_READABLE: 2
};

/**
 * @enum {number}
 */
proto.ligo.v1.MichelsonFormat = {
  MICHELSON_FORMAT_TEXT: 0,
  MICHELSON_FORMAT_JSON: 1,
  MICHELSON_FORMAT_HEX: 2
};

/**
 * @enum {number}
 */
proto.ligo.v1.Syntax = {
  SYNTAX_PASCALIGO: 0,
  SYNTAX_CAMELIGO: 1,
  SYNTAX_REASONLIGO: 2,
  SYNTAX_JSLIGO: 3
};

/**
 * @enum {number}
 */
proto.ligo.v1.Protocol = {
  PROTOCOL_HANGZHOU: 0,
  PROTOCOL_ITHACA: 1
};

goog.object.extend(exports, proto.ligo.v1);
